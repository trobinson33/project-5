// ==========================================================================
// Mixins
// ==========================================================================

// Media queries

@mixin mq($break) {

	@if $break == "small" {
		@media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
			@content;
		}
	}
	@else if $break == "medium" {
		@media (min-width: $brkpoint-md + 1) {
			@content;
		}
	}
	@else if $break == "large" {
		@media (min-width: $brkpoint-lg + 1) {
			@content;
		}
	}
	@else {
		@error "Whoops! No value could be retrived for '#{$break}'";
	}
}

// Create a flex container
@mixin flexy(
  $disp: flex,
  $dir: null,
  $wrap: null,
  $just: null,
  $align: null) {
  display: $disp;
  flex-direction: $dir;
  flex-wrap: $wrap;
  justify-content: $just;
  align-items: $align;
    
}

// Grid Columns
@mixin g-columns {
	@for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;  
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));
    
    // Generate column modifier classes
    &--#{$i} {
    	width: 100%;
    	@include mq(large) {
	      width: percentage($target / $context);
	    }
    }
  }
}

// Generate modifier color classes
@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;    
		}
	}
}

@mixin column-colors($map) {
	@each $number, $color in $map {
		&--#{$number} {
			&.theme__colors {
			background-color: $color;
			border-radius: $br--default;
			text-align: left;
			padding: 10px;

			@include mq(large){
				text-align: center;
			}
			}   
		}
	}
}


// Adjacent sibling margins

@mixin doubly($margin: 1em) {
	& + & {
	  margin-left: $margin;
    @content;
	}
}

// BEM selectors

@mixin e($element) {
	&__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}